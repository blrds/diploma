слайд1


слайд2
Гибридные модели сочетают дискретные события и непрерывную динамику, важны для сложных задач. Одновременно современные системы переходят от монолитных к распределённым архитектурам, где нужны совместимые форматы данных. Унифицированное представление облегчает интеграцию разных компонентов и ускоряет разработку масштабируемых систем.

слайд3
Цель работы – создать единый формат описания дискретно-непрерывных моделей и реализовать его в системе с разделением на клиент, серверы-слушатель и сервер-вычислитель. Это позволяет объединить дискретные и непрерывные процессы в единой схеме, оптимизировать вычисления и обеспечить масштабируемость. В результате сокращаются затраты на разработку и обеспечивается гибкость системы.

слайд4
Система спроектирована по схеме клиент–сервер. Клиент просит предоставить ему вычислитель, сервер-слушатель пораждает такой, и в дальнейшем просто является наблюдателем. В это время только что созданный сервер вычислитель и клиент обмениваются моделью, результатами отчетов и прочими данными. После того как клиент окончательно скажет что он закончил, сервер-вычислитель самоудаляется, чтобы очистить общие ресурсы. Такое разделение обеспечивает гибкость и масштабируемость.

слайд5
Для обмена данными используется RPC-протокол gRPC, работающий по HTTP/2 и поддерживающий потоковую передачу. Это даёт высокую скорость и надёжность передачи. Данные моделей сериализуются в стандартизованный формат, что гарантирует корректную передачу состояний, формул и переходов. Такой подход облегчает интеграцию различных компонентов и создание масштабируемой инфраструктуры.

слайд6
В разработанном представлении модель описывается как набор состояний и переходов (событий) плюс непрерывные параметры. Главными параметрами и состояния и перехода является система уравнений, но в отличие от состояний, система в переходе вычисляется только, если срабатывает логическая система уравнений, характеризующая данный переход. Так например будет выглядить модель прыгающего мяча.

слайд7
Для корректной передачи модели также была спроектирована модель в формате JSON. Такой подход обеспечивает безошибочную и полную передачу модели от клиент к серверу, и если это требуется, между модулями вычислителя.

слайд8
Для тестирования и демонстрации работспособности был реазилован клиент как веб-приложение (MVVM, WPF). В нём пользователь задаёт параметры задачи, строит графовое представлеие и запускает вычисления. Так же внутри интерфейса есть и визуалиция графиков как изменение состояний во времени, или иных параметров модели,

слайд9
На сервере-вычислителе реализована модульная архитектура. Главное ядро организует всю работу и обращается к остальным модулям через их апи. Модуль соединения реализует логику общения с клиентом, математическое ядро реализует основные математические функции, а так же использует апи модуля для решения дифференциальных уравнений. При этом главное ядро и математическое используют апи модуля переменных.

слайд10
Модуль переменных реализует архитектуру хранения и взаимодействия с ними, используя в основе хеш-таблицу, где ключом выступает имя переменной, а значением характеристики и значение этой переменной. Существует как глобальная область, так и локальная область, выделяющаяся во время проверок переходов

слайд11
В результате запуска вычислитель отправляет параметры модели клиенту с частотой в 10 тактов модели, что позволяет динамически следить за показателями. Так будет продолжаться, пока вычислитель не достигнет указанного предела по времени или пока клиент не отправит сигнал стоп.

слайд12
В итоге можно сказать,что данная архитектура реализует поставленные задачи: каждый модуль можно заменить или модифицировать, внедряя новые реализации отдельных функций и при этом остаётся эффективным в плане скорости расчетов и затрачиваемых ресурсов систем. Благодря выше указанным достоинствам данная архитектура может быть использована исследовательских группами и студентами для исследования как моделей так и различных реализаций отдельных функций.