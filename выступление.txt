слайд1


слайд2
Гибридные модели сочетают дискретные события и непрерывную динамику, важны для сложных задач. Одновременно современные системы переходят от монолитных к распределённым архитектурам, где нужны совместимые форматы данных. Унифицированное представление облегчает интеграцию разных компонентов и ускоряет разработку масштабируемых систем.

слайд3
Цель работы – создать единый формат описания дискретно-непрерывных моделей и реализовать его в системе с разделением на клиент, серверы-слушатель и сервер-вычислитель. Это позволяет объединить дискретные и непрерывные процессы в единойсхеме, оптимизировать вычисления и обеспечить масштабируемость. В результате сокращаются затраты на разработку и обеспечивается гибкость системы.

слайд4
Приведённые среды широко распространены. Simulink удобен для быстрой сборки прикладных моделей, но ограничен гибкостью в описании гибридных процессов. Modelica позволяет декларативно описывать сложные системы уравнений (особенно многопроцессных). Каждый инструмент имеет свои преимущества и ограничения.

слайд5
AnyLogic позволяет моделировать сложные междисциплинарные системы, объединяя различные парадигмы. В целом, Simulink хорошо подходит для быстрой прототипизации, Modelica – для многофизических расчётов, AnyLogic – для социотехнических систем. Однако каждый из них имеет ограничения (например, Simulink менее гибок, AnyLogic ограничен непрерывной динамикой). Это обосновывает потребность в новом подходе.

слайд6
Система спроектирована по схеме клиент–сервер. Клиент взаимодействует с пользователем и отправляет задачи, сервер-слушатель обрабатывает входящие сообщения, а сервер-вычислитель выполняет расчёты. Такое разделение обеспечивает гибкость и масштабируемость (новые узлы можно добавлять без перепроектирования). Для обмена используется эффективный протокол gRPC.

слайд7
В разработанном представлении модель описывается как набор состояний и переходов (событий) плюс непрерывные параметры. Состояние фиксирует конфигурацию в момент времени, событие – мгновенное изменение состояния, переменные – непрерывные параметры. Такой подход позволяет захватить как быстрые переходы, так и длительную эволюцию параметров

слайд8
Для обмена данными используется современный RPC-протокол gRPC, работающий по HTTP/2 и поддерживающий стримы. Это даёт высокую скорость и надёжность передачи. Данные моделей сериализуются в стандартизованный формат, что гарантирует корректную передачу состояний, формул и переходов. Такой подход облегчает интеграцию различных компонентов и создание масштабируемой инфраструктуры.

слайд9
Клиент реализован как веб-приложение (MVVM, WPF). В нём пользователь задаёт параметры задачи и запускает вычисления. Результаты отображаются наглядно: например, строится граф состояний модели (связи, формулы) с помощью Graph#, что помогает анализировать структуру модели. Интерфейс поддерживает асинхронную работу по gRPC.

слайд10
На сервере-вычислителе реализовано ядро вычислений. Оно получает JSON-модель, обрабатывает дискретные события (проверка условий, переходы) и рассчитывает непрерывные изменения (интеграция уравнений). Как показано на схеме, сервер включает модули обработки переменных, арифметических операций и состояний. Сервер написан на C/C# для быстрого выполнения математических расчётов, с учётом освобождения ресурсов после завершения циклов.

слайд11
Последовательность работы: пользователь через клиент запускает расчёт, запрос отправляется на сервер-слушатель, который выбирает нужный вычислительный узел и пересылает ему данные. После выполнения вычислений сервер-вычислитель формирует ответ и шлёт его обратно клиенту через ту же цепочку. Благодаря gRPC весь обмен организован надёжно и с минимальной задержкой.

слайд12
Первый тест – классическая задача двух баков. На графике показаны уровни жидкости во времени для каждого резервуара. Результаты моделирования полностью совпали с теоретическими решениями, что подтверждает корректность реализации численного алгоритма. Система надёжно вычисляет обе части динамики.

слайд13
Второй тест – модель «прыгающего мячика» (гибридная система с непрерывной подпрыгивающей фазой и дискретными ударами). Графики показывают высоту и скорость мяча во времени. Максимальная высота с каждым отскоком уменьшалась, интервалы между ударами сокращались, как и предсказывает теории. Проверка повторных запусков подтвердила детерминированность и стабильность системы.

слайд14
Итоги: создан прототип программного комплекса, который демонстрирует эффективность предложенного подхода. Единый формат данных значительно упрощает совместную работу над моделями – например, внутри научных групп или на кафедре – снижает время разработки и интеграции компонентов. Распределённая реализация (gRPC, Docker) даёт масштабируемость и высокую производительность. Разработанный подход особенно удобен для исследовательских команд, обеспечивая стандартизацию представления модели и ускоряя запуск экспериментов.